package presentacion;

import excepciones.ClaveNoExisteException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import Negocio.AVL;
import Negocio.ArbolB;
import Negocio.ArbolBinarioBusqueda;
import Negocio.ArbolMViasBusqueda;
import Negocio.ClaveNoExisteExcepcion;
import Negocio.IArbolBusqueda;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author jdani
 */
public class JFPresentacion extends javax.swing.JFrame {

    /**
     * Creates new form JFPresentacion
     */
    IArbolBusqueda<String, String> diccionario = new ArbolBinarioBusqueda();
    private final List<String> listaDeClaves = new LinkedList<>();
    //IArbolBusqueda<String, String> diccionario;
    boolean cambio = true;

    public JFPresentacion() throws FileNotFoundException, IOException {
        File archivoPalabras = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\Palabras.txt");
        File archivoSignificado = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\Significado.txt");

        BufferedReader entradaDePalabras = new BufferedReader(new FileReader(archivoPalabras));
        BufferedReader entradaDeSignificados = new BufferedReader(new FileReader(archivoSignificado));
        String lecturaPalabras = entradaDePalabras.readLine();
        String lecturaSignificados = entradaDeSignificados.readLine();
        String lineaVacia = "";
        int cantidadDeRotaciones = 0;
        //RELLENAR EL ARBOL
        while (lecturaPalabras != null) {
            String palabra = null;
            String significado = "";
            //Palabras
            palabra = lecturaPalabras;
            lecturaPalabras = entradaDePalabras.readLine();

            //Significado
            while (!lineaVacia.equals(lecturaSignificados)) {
                significado += lecturaSignificados + "\n";
                lecturaSignificados = entradaDeSignificados.readLine();
            }

            //Cargar
            listaDeClaves.add(palabra);  //--  estado global que me ayuda a buscar las palabras y autocompletado--------------------

            diccionario.insertar(palabra, significado);
            lecturaPalabras = entradaDePalabras.readLine();
            lecturaSignificados = entradaDeSignificados.readLine();
        }

        initComponents();
        this.setLocationRelativeTo(null);

        //-------buscador inicia invisible
        jList1.setVisible(false);
        jScrollPane3.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        txtEntradaBuscar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        txtEliminarPalabra = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        txtInsertarNuevaPalabra = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtInsertarNuevoSinigicado = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arbol Binario de Busqueda");
        setFont(new java.awt.Font("Roboto", 1, 10)); // NOI18N

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 660, 20, 10));
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 660, 30, 10));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(60, 60, 68));
        jButton1.setText("Buscar");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 90, 110, 40));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jList1.setBackground(new java.awt.Color(173, 135, 255));
        jList1.setBorder(null);
        jList1.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jList1.setForeground(new java.awt.Color(255, 255, 255));
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jList1.setMaximumSize(new java.awt.Dimension(46, 150));
        jList1.setMinimumSize(new java.awt.Dimension(46, 712));
        jList1.setPreferredSize(new java.awt.Dimension(46, 120));
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jList1);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 280, 90));

        txtEntradaBuscar.setBackground(new java.awt.Color(112, 80, 243));
        txtEntradaBuscar.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        txtEntradaBuscar.setForeground(new java.awt.Color(255, 255, 255));
        txtEntradaBuscar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtEntradaBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtEntradaBuscar.setMargin(new java.awt.Insets(4, 10, 4, 10));
        txtEntradaBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEntradaBuscarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEntradaBuscarKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEntradaBuscarKeyTyped(evt);
            }
        });
        jPanel2.add(txtEntradaBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 280, 40));

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(112, 80, 243));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SIGNIFICADO", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Roboto", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jTextArea1.setMargin(new java.awt.Insets(4, 10, 4, 10));
        jScrollPane1.setViewportView(jTextArea1);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 400, 200));

        txtEliminarPalabra.setBackground(new java.awt.Color(112, 80, 243));
        txtEliminarPalabra.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtEliminarPalabra.setForeground(new java.awt.Color(255, 255, 255));
        txtEliminarPalabra.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtEliminarPalabra.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtEliminarPalabra.setMargin(new java.awt.Insets(4, 10, 4, 10));
        jPanel2.add(txtEliminarPalabra, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 400, 280, 40));

        jButton3.setBackground(new java.awt.Color(242, 111, 147));
        jButton3.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Eliminar");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 400, 110, 40));

        txtInsertarNuevaPalabra.setBackground(new java.awt.Color(112, 80, 243));
        txtInsertarNuevaPalabra.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        txtInsertarNuevaPalabra.setForeground(new java.awt.Color(255, 255, 255));
        txtInsertarNuevaPalabra.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtInsertarNuevaPalabra.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtInsertarNuevaPalabra.setMargin(new java.awt.Insets(4, 10, 4, 10));
        jPanel2.add(txtInsertarNuevaPalabra, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 90, 280, 40));

        txtInsertarNuevoSinigicado.setBackground(new java.awt.Color(112, 80, 243));
        txtInsertarNuevoSinigicado.setColumns(20);
        txtInsertarNuevoSinigicado.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        txtInsertarNuevoSinigicado.setForeground(new java.awt.Color(255, 255, 255));
        txtInsertarNuevoSinigicado.setLineWrap(true);
        txtInsertarNuevoSinigicado.setRows(5);
        txtInsertarNuevoSinigicado.setWrapStyleWord(true);
        txtInsertarNuevoSinigicado.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SIGNIFICADO", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Roboto", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        txtInsertarNuevoSinigicado.setMargin(new java.awt.Insets(4, 10, 4, 10));
        jScrollPane2.setViewportView(txtInsertarNuevoSinigicado);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 150, 400, 200));

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(60, 60, 68));
        jButton2.setText("Insertar");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 90, 110, 40));

        jLabel3.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("NUEVA PALABBRA");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 70, -1, -1));

        jLabel4.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("ELIMINAR PALABRA");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 380, -1, -1));

        jLabel5.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("PALABRA");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, -1, -1));

        jSeparator1.setBackground(new java.awt.Color(212, 143, 42));
        jSeparator1.setForeground(new java.awt.Color(219, 141, 65));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(226, 120, 16)));
        jSeparator1.setEnabled(false);
        jPanel2.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 70, -1, 370));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1000, 550));

        jMenuBar1.setBackground(new java.awt.Color(204, 204, 204));
        jMenuBar1.setForeground(new java.awt.Color(51, 51, 51));

        jMenu1.setText("File     ");

        jMenuItem1.setText("Diccionario Inglés");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Diccionario Español");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("TipoDeArbol    ");

        jMenuItem3.setText("Arbol Binario De Busqueda");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Arbol AVL");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Arbol MVias");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Arbol B");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ver        ");

        jMenuItem7.setText("Palabras del Diccionario");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        diccionario.vaciar();
        listaDeClaves.clear();
        //System.out.println("se vacio el arbol! ");
        BufferedReader entradaDePalabras = null;
        try {
            // TODO add your handling code here: //  cargar diccionario en ingles
            File archivoPalabras = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\palabrasIngles.txt");
            File archivoSignificado = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\significadoIngles.txt");
            entradaDePalabras = new BufferedReader(new FileReader(archivoPalabras));
            BufferedReader entradaDeSignificados = new BufferedReader(new FileReader(archivoSignificado));
            String lecturaPalabras = entradaDePalabras.readLine();
            String lecturaSignificados = entradaDeSignificados.readLine();
            String lineaVacia = "";
            int cantidadDeRotaciones = 0;
            //RELLENAR EL ARBOL
            while (lecturaPalabras != null) {
                String palabra = null;
                String significado = "";
                //Palabras
                palabra = lecturaPalabras;
                lecturaPalabras = entradaDePalabras.readLine();

                //Significado
                while (!lineaVacia.equals(lecturaSignificados)) {
                    significado += lecturaSignificados + "\n";
                    lecturaSignificados = entradaDeSignificados.readLine();
                }

                //Cargar
                System.out.println(palabra);
                listaDeClaves.add(palabra);//-------------------------------------------------------------actualizar estado global---

                diccionario.insertar(palabra, significado);
                lecturaPalabras = entradaDePalabras.readLine();
                lecturaSignificados = entradaDeSignificados.readLine();

                limpiar();
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                entradaDePalabras.close();
            } catch (IOException ex) {
                Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void limpiar() {
        txtEntradaBuscar.setText("");
        jTextArea1.setText("");
        txtInsertarNuevaPalabra.setText("");
        txtInsertarNuevoSinigicado.setText("");
        txtEliminarPalabra.setText("");
    }

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        this.setTitle("ARBOL BINARIO DE BUSQUEDA");

        List<String> claves = new LinkedList<>();
        List<String> valores = new LinkedList<>();
        if (cambio) {
            claves = diccionario.recorridoEnInOrden();
            valores = diccionario.recorridoEnInOrdenDeValores();
        } else {

            BufferedReader entradaDePalabras = null;
            try {
                File archivoPalabras = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\Palabras.txt");
                File archivoSignificado = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\Significado.txt");
                entradaDePalabras = new BufferedReader(new FileReader(archivoPalabras));
                BufferedReader entradaDeSignificados = new BufferedReader(new FileReader(archivoSignificado));
                String lecturaPalabras = entradaDePalabras.readLine();
                String lecturaSignificados = entradaDeSignificados.readLine();
                String lineaVacia = "";
                int cantidadDeRotaciones = 0;
                //RELLENAR EL ARBOL
                while (lecturaPalabras != null) {
                    String palabra = null;
                    String significado = "";
                    //Palabras
                    palabra = lecturaPalabras;
                    lecturaPalabras = entradaDePalabras.readLine();

                    //Significado
                    while (!lineaVacia.equals(lecturaSignificados)) {
                        significado += lecturaSignificados + "\n";
                        lecturaSignificados = entradaDeSignificados.readLine();
                    }

                    //Cargar
                    //diccionario.insertar(palabra, significado);
                    claves.add(palabra);
                    valores.add(significado);
                    lecturaPalabras = entradaDePalabras.readLine();
                    lecturaSignificados = entradaDeSignificados.readLine();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    entradaDePalabras.close();
                } catch (IOException ex) {
                    Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

        diccionario = new ArbolBinarioBusqueda<>();
        cambio = true;

        for (int i = 0; i < claves.size(); i++) {
            diccionario.insertar(claves.get(i), valores.get(i));
        }

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        this.setTitle("ARBOL AVL");

        List<String> claves = new LinkedList<>();
        List<String> valores = new LinkedList<>();
        System.out.println(cambio);
        if (cambio) {
            claves = diccionario.recorridoEnInOrden();
            valores = diccionario.recorridoEnInOrdenDeValores();
        } else {

            BufferedReader entradaDePalabras = null;
            try {
                File archivoPalabras = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\Palabras.txt");
                File archivoSignificado = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\Significado.txt");
                entradaDePalabras = new BufferedReader(new FileReader(archivoPalabras));
                BufferedReader entradaDeSignificados = new BufferedReader(new FileReader(archivoSignificado));
                String lecturaPalabras = entradaDePalabras.readLine();
                String lecturaSignificados = entradaDeSignificados.readLine();
                String lineaVacia = "";
                int cantidadDeRotaciones = 0;
                //RELLENAR EL ARBOL
                while (lecturaPalabras != null) {
                    String palabra = null;
                    String significado = "";
                    //Palabras
                    palabra = lecturaPalabras;
                    lecturaPalabras = entradaDePalabras.readLine();

                    //Significado
                    while (!lineaVacia.equals(lecturaSignificados)) {
                        significado += lecturaSignificados + "\n";
                        lecturaSignificados = entradaDeSignificados.readLine();
                    }

                    //Cargar
                    //diccionario.insertar(palabra, significado);
                    claves.add(palabra);
                    valores.add(significado);
                    lecturaPalabras = entradaDePalabras.readLine();
                    lecturaSignificados = entradaDeSignificados.readLine();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    entradaDePalabras.close();
                } catch (IOException ex) {
                    Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

        diccionario = new AVL<>();
        cambio = true;

        for (int i = 0; i < claves.size(); i++) {
            diccionario.insertar(claves.get(i), valores.get(i));
        }


    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        this.setTitle("ARBOL MVIAS DE BUSQUEDA");

        List<String> claves = new LinkedList<>();
        List<String> valores = new LinkedList<>();
        if (cambio) {
            claves = diccionario.recorridoEnInOrden();
            valores = diccionario.recorridoEnInOrdenDeValores();
        } else {

            BufferedReader entradaDePalabras = null;
            try {
                File archivoPalabras = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\Palabras.txt");
                File archivoSignificado = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\Significado.txt");
                entradaDePalabras = new BufferedReader(new FileReader(archivoPalabras));
                BufferedReader entradaDeSignificados = new BufferedReader(new FileReader(archivoSignificado));
                String lecturaPalabras = entradaDePalabras.readLine();
                String lecturaSignificados = entradaDeSignificados.readLine();
                String lineaVacia = "";
                int cantidadDeRotaciones = 0;
                //RELLENAR EL ARBOL
                while (lecturaPalabras != null) {
                    String palabra = null;
                    String significado = "";
                    //Palabras
                    palabra = lecturaPalabras;
                    lecturaPalabras = entradaDePalabras.readLine();

                    //Significado
                    while (!lineaVacia.equals(lecturaSignificados)) {
                        significado += lecturaSignificados + "\n";
                        lecturaSignificados = entradaDeSignificados.readLine();
                    }

                    //Cargar
                    //diccionario.insertar(palabra, significado);
                    claves.add(palabra);
                    valores.add(significado);
                    lecturaPalabras = entradaDePalabras.readLine();
                    lecturaSignificados = entradaDeSignificados.readLine();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    entradaDePalabras.close();
                } catch (IOException ex) {
                    Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

        diccionario = new ArbolMViasBusqueda<>();
        cambio = true;

        for (int i = 0; i < claves.size(); i++) {
            diccionario.insertar(claves.get(i), valores.get(i));
        }


    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String palabra = txtInsertarNuevaPalabra.getText();
        String significado = txtInsertarNuevoSinigicado.getText();
        diccionario.insertar(palabra, significado);

        listaDeClaves.add(palabra);

        JOptionPane.showMessageDialog(null, "se inserto la nueva palabra");

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String palabra = txtEliminarPalabra.getText();
        try {
            if (listaDeClaves.contains(palabra)) {// solo se eliminar si existe la palabra  . primero verificmos si existe en la lista List<>
                diccionario.eliminar(palabra);
                listaDeClaves.remove(palabra);
                JOptionPane.showMessageDialog(null, "Se elimino " + palabra + " del diccionario");
            } else {
                JOptionPane.showMessageDialog(null, "La palabra no existe en el diccionario!");
            }

        } catch (ClaveNoExisteExcepcion ex) {
            Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:------------------------BOTON DE BUSCAR---------------------------
        String palabraABuscar = txtEntradaBuscar.getText();
        String significado = diccionario.buscar(palabraABuscar);
        jTextArea1.setText(significado);

        jList1.setVisible(false);  //OCULTAR EL AUTOMPLETADOR
        jScrollPane3.setVisible(false);
        //txtEntradaBuscar.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtEntradaBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEntradaBuscarKeyTyped
    }//GEN-LAST:event_txtEntradaBuscarKeyTyped

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here: INSERTAR EN EL TXT DE ENTRADA EL VALOR SELECCIONADO EN EL AUTOCOMPLETADO---
        txtEntradaBuscar.setText(jList1.getSelectedValue());
        jList1.setVisible(false);
        jScrollPane3.setVisible(false);
    }//GEN-LAST:event_jList1ValueChanged

    private void txtEntradaBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEntradaBuscarKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEntradaBuscarKeyPressed

    private void txtEntradaBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEntradaBuscarKeyReleased
        // TODO add your handling code here:-----------------------MOSTRAR OPCIONES A ESCOGER DE LA PALABBRA A BUSCAR .. ----------- 
        //---ESTE EVENTO SE EJECUTA CADA VEZ QUE PRESIONA ALGUNA TECLA 
        if ("".equals(txtEntradaBuscar.getText())) {
            jList1.setVisible(false);
            jScrollPane3.setVisible(false);
        } else {
            jList1.setVisible(true);
            jScrollPane3.setVisible(true);

            String[] listData = new String[4];
            int i = 0;
            for (String palabra : listaDeClaves) {
                if (palabra.startsWith(txtEntradaBuscar.getText())) {
                    if (i < listData.length) {
                        listData[i] = palabra;
                        i++;
                    }
                }
            }
            jList1.setListData(listData);
        }
    }//GEN-LAST:event_txtEntradaBuscarKeyReleased

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:----SE ESCOGIO ARBOL B 
        this.setTitle("ARBOL B");

        List<String> claves = new LinkedList<>();
        List<String> valores = new LinkedList<>();
        System.out.println("ve cambio");
        System.out.println(cambio);
        if (cambio) {
            claves = diccionario.recorridoEnInOrden();
            valores = diccionario.recorridoEnInOrdenDeValores();
        } else {

            BufferedReader entradaDePalabras = null;
            try {
                File archivoPalabras = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\Palabras.txt");
                File archivoSignificado = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\Significado.txt");
                entradaDePalabras = new BufferedReader(new FileReader(archivoPalabras));
                BufferedReader entradaDeSignificados = new BufferedReader(new FileReader(archivoSignificado));
                String lecturaPalabras = entradaDePalabras.readLine();
                String lecturaSignificados = entradaDeSignificados.readLine();
                String lineaVacia = "";
                int cantidadDeRotaciones = 0;
                //RELLENAR EL ARBOL
                while (lecturaPalabras != null) {
                    String palabra = null;
                    String significado = "";
                    //Palabras
                    palabra = lecturaPalabras;
                    lecturaPalabras = entradaDePalabras.readLine();

                    //Significado
                    while (!lineaVacia.equals(lecturaSignificados)) {
                        significado += lecturaSignificados + "\n";
                        lecturaSignificados = entradaDeSignificados.readLine();
                    }

                    //Cargar
                    //diccionario.insertar(palabra, significado);
                    claves.add(palabra);
                    valores.add(significado);
                    lecturaPalabras = entradaDePalabras.readLine();
                    lecturaSignificados = entradaDeSignificados.readLine();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    entradaDePalabras.close();
                } catch (IOException ex) {
                    Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

        diccionario = new ArbolB<>();
        cambio = true;

        for (int i = 0; i < claves.size(); i++) {
            diccionario.insertar(claves.get(i), valores.get(i));
        }


    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        BufferedReader entradaDePalabras = null;
        try {
            // TODO add your handling code here:
            File archivoPalabras = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\Palabras.txt");
            File archivoSignificado = new File("C:\\Users\\jdani\\Desktop\\Universidad\\5to semestre\\Estructura De Datos 2\\Periodo 2-2023\\Proyecto-Diccionario-Arboles-master\\build\\classes\\datos\\Significado.txt");
            entradaDePalabras = new BufferedReader(new FileReader(archivoPalabras));
            BufferedReader entradaDeSignificados = new BufferedReader(new FileReader(archivoSignificado));
            String lecturaPalabras = entradaDePalabras.readLine();
            String lecturaSignificados = entradaDeSignificados.readLine();
            String lineaVacia = "";
            int cantidadDeRotaciones = 0;
            //RELLENAR EL ARBOL
            while (lecturaPalabras != null) {
                String palabra = null;
                String significado = "";
                //Palabras
                palabra = lecturaPalabras;
                lecturaPalabras = entradaDePalabras.readLine();

                //Significado
                while (!lineaVacia.equals(lecturaSignificados)) {
                    significado += lecturaSignificados + "\n";
                    lecturaSignificados = entradaDeSignificados.readLine();
                }

                //Cargar
                listaDeClaves.add(palabra);  //--  estado global que me ayuda a buscar las palabras y autocompletado--------------------

                diccionario.insertar(palabra, significado);
                lecturaPalabras = entradaDePalabras.readLine();
                lecturaSignificados = entradaDeSignificados.readLine();
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                entradaDePalabras.close();
            } catch (IOException ex) {
                Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private ListaDePalabras listaDePalabras = new ListaDePalabras();
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed

        listaDePalabras.setListaDePalabras(this.diccionario);

        listaDePalabras.setVisible(true);

    }//GEN-LAST:event_jMenuItem7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFPresentacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFPresentacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFPresentacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFPresentacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new JFPresentacion().setVisible(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(JFPresentacion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<String> jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField txtEliminarPalabra;
    private javax.swing.JTextField txtEntradaBuscar;
    private javax.swing.JTextField txtInsertarNuevaPalabra;
    private javax.swing.JTextArea txtInsertarNuevoSinigicado;
    // End of variables declaration//GEN-END:variables
}
